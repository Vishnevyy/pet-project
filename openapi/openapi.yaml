openapi: 3.0.0
info:
  title: API
  version: 1.0.0

paths:
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - tasks
      responses:
        "200":
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"

    post:
      summary: Create a new task
      tags:
        - tasks
      requestBody:
        description: The task to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "201":
          description: The created task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: Invalid input

  /tasks/{id}:
    patch:
      summary: Update a task by ID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the task to update
          schema:
            type: integer
            format: int64
            minimum: 0
      requestBody:
        description: Task data to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskUpdate"
      responses:
        "200":
          description: The updated task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "404":
          description: Task not found
        "400":
          description: Invalid input

    delete:
      summary: Delete a task by ID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the task to delete
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        "204":
          description: Task deleted successfully
        "404":
          description: Task not found

  /users:
    get:
      summary: Get all users
      tags:
        - users
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"

    post:
      summary: Create a new user
      tags:
        - users
      requestBody:
        description: The user to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: The created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input

  /users/{id}:
    patch:
      summary: Update a user by ID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
            format: int64
            minimum: 0
      requestBody:
        description: User data to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: The updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
        "400":
          description: Invalid input

    delete:
      summary: Delete a user by ID
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found

  /users/{id}/tasks:
    get:
      summary: Get tasks by user ID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to fetch tasks for
          schema:
            type: integer
            format: int64
            minimum: 0
      responses:
        "200":
          description: A list of tasks for the specified user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          description: Unique identifier for the task (positive integer).
        title:
          type: string
          description: Description of the task.
        completed:
          type: boolean
          description: Indicates whether the task is completed.
        user_id:
          type: integer
          format: int64
          minimum: 0
          description: ID of the user who owns the task.
      required:
        - title
        - completed
        - user_id

    TaskUpdate:
      type: object
      properties:
        title:
          type: string
          description: Updated description of the task.
        completed:
          type: boolean
          description: Updated status of the task.

    UserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email of the user.
        password:
          type: string
          description: Password of the user.
      required:
        - email
        - password

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          description: Unique identifier for the user (positive integer).
        email:
          type: string
          format: email
          description: Email of the user.
      required:
        - id
        - email

    UserUpdateRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Updated email of the user.
        password:
          type: string
          description: Updated password of the user.
